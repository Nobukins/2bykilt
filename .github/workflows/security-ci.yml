name: Security CI2

on:
  pull_request:
    branches: [ "*" ]
  push:
    branches: ["2bykilt"]
  # schedule:
  #   - cron: '0 2 * * *'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read
  checks: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  prepare:
    name: Prepare / Install
    runs-on: ubuntu-latest
    outputs:
      coverage-file: ${{ steps.coverage_path.outputs.path }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pip-audit
      - name: Show dependency tree
        run: pip freeze
      - name: Cache pip-audit results
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip-audit
          key: pip-audit-${{ runner.os }}-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'Pipfile*') }}
          restore-keys: |
            pip-audit-${{ runner.os }}-
      - name: Record coverage path
        id: coverage_path
        run: echo "path=coverage.xml" >> $GITHUB_OUTPUT

  test:
    name: Test & Coverage
    continue-on-error: true
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install (reuse)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Pytest (ci_safe subset for stable coverage)
        run: |
          echo "Running pytest restricted to ci_safe tests to avoid environment-specific browser/profile failures in CI."
          # Guard: fail fast if any workflow or script still references the deprecated tests/pytest.ini path
          if grep -R "tests/pytest.ini" -n . \
            | grep -v "scripts/ci_pytest.sh" \
            | grep -v "./docs/" \
            | grep -v ".github/workflows/security-ci.yml"; then
            echo "[FATAL] Detected stale non-doc reference to tests/pytest.ini. Please remove it (docs/ path is tolerated)." >&2
            exit 5
          fi
          # Use unified runner script for consistent local/CI behavior
          chmod +x scripts/ci_pytest.sh
          ./scripts/ci_pytest.sh ci
          # Generate coverage XML if coverage data exists
          if [ -f .coverage ]; then
            coverage xml -i -o coverage.xml
          else
            echo "Coverage data not found, skipping XML generation"
          fi
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  sonar:
    name: SonarCloud / SAST
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name != 'schedule' && github.actor != 'dependabot[bot]' }}
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Check SonarCloud token
        id: check_token
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "SONAR_TOKEN not set, skipping SonarCloud analysis"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "SONAR_TOKEN is set, proceeding with SonarCloud analysis"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - uses: actions/checkout@v4
        if: steps.check_token.outputs.skip == 'false'
        with:
          fetch-depth: 0
      - name: Setup Python (for analyzers)
        if: steps.check_token.outputs.skip == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Download coverage
        if: steps.check_token.outputs.skip == 'false'
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
      - name: Normalize coverage path
        if: steps.check_token.outputs.skip == 'false'
        shell: bash
        run: |
          if [ -f coverage-xml/coverage.xml ]; then
            cp coverage-xml/coverage.xml coverage.xml
          fi
      - name: SonarCloud Scan
        if: steps.check_token.outputs.skip == 'false'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >-
            -Dsonar.python.coverage.reportPaths=coverage.xml
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.key={0} -Dsonar.pullrequest.branch={1} -Dsonar.pullrequest.base={2}', github.event.pull_request.number, github.head_ref, github.base_ref) || '' }}
      - name: Quality Gate (PR only)
        if: ${{ github.event_name == 'pull_request' && steps.check_token.outputs.skip == 'false' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          python - <<'PY'
          import json, os, sys, time, urllib.request, base64
          host = 'https://sonarcloud.io'
          project_key = None
          try:
            with open('sonar-project.properties', 'r') as f:
              for line in f:
                if line.startswith('sonar.projectKey='):
                  project_key = line.strip().split('=', 1)[1]
                  break
          except FileNotFoundError:
            pass
          if not project_key:
            print('sonar-project.properties not found or sonar.projectKey missing; skip gate check')
            sys.exit(0)
          token = os.environ.get('SONAR_TOKEN')
          if not token:
            print('SONAR_TOKEN not set; skip gate check')
            sys.exit(0)
          auth_header = 'Basic ' + base64.b64encode((token + ':').encode()).decode()
          url = f"{host}/api/qualitygates/project_status?projectKey={project_key}"
          # Poll up to ~90s for gate to be computed
          for _ in range(30):
            try:
              req = urllib.request.Request(url, headers={'Authorization': auth_header})
              with urllib.request.urlopen(req, timeout=10) as resp:
                data = json.loads(resp.read().decode())
              status = (data.get('projectStatus') or {}).get('status')
              print('Quality Gate status:', status)
              if status in ('OK', 'ERROR', 'FAILED'):
                if status in ('ERROR', 'FAILED'):
                  sys.exit(1)
                sys.exit(0)
            except Exception as e:
              print('Gate poll error:', e)
            time.sleep(3)
          print('Quality Gate status not available in time; not failing the job')
          sys.exit(0)
          PY
  # Note: The legacy 'sonar-quality-gate:check' arg is unsupported in this Action.
  # We enforce gate via the PR Quality Gate step above and/or GitHub branch protection checks.

  sca:
    name: Dependency Audit (pip-audit)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit PyYAML
      - name: Cache pip-audit results
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip-audit
          key: pip-audit-${{ runner.os }}-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'Pipfile*') }}
          restore-keys: |
            pip-audit-${{ runner.os }}-
      - name: Run pip-audit with performance measurement
        id: pip_audit
        run: |
          # Ensure artifacts directory exists
          mkdir -p artifacts/security

          # Define pip-audit command
          PIP_AUDIT_CMD="pip-audit -r requirements.txt -f json"

          # Measure performance
          python scripts/measure_scan_perf.py \
            --tool pip-audit \
            --command "$PIP_AUDIT_CMD" \
            --output artifacts/security/scan_perf_before_after.json \
            --baseline

          # Run pip-audit
          $PIP_AUDIT_CMD > pip-audit-raw.json || true

          # Normalize output
          python tools/security/normalize_pip_audit.py pip-audit-raw.json artifacts/security/vuln_report.json

          # Apply policy check
          python - <<'PY'
          import json
          import yaml
          import sys
          from pathlib import Path

          # Load policy
          with open('security/security_policy.yaml', 'r') as f:
              policy = yaml.safe_load(f)

          # Load normalized report
          with open('artifacts/security/vuln_report.json', 'r') as f:
              report = json.load(f)

          # Check thresholds
          thresholds = policy['thresholds']
          summary = report['summary']['by_severity']

          violations = []
          for severity, max_allowed in thresholds.items():
              if severity.startswith('max_'):
                  sev_level = severity[4:]  # Remove 'max_' prefix
                  count = summary.get(sev_level, 0)
                  if count > max_allowed:
                      violations.append(f"{sev_level}: {count} > {max_allowed}")

          if violations:
              print("Policy violations detected:")
              for v in violations:
                  print(f"  - {v}")
              sys.exit(1)

          print("All security policies passed")
          PY
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            artifacts/security/vuln_report.json
            artifacts/security/scan_perf_before_after.json
            pip-audit-raw.json

  secret:
    name: Secret Scan (gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config: .gitleaks.toml
          fail: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # container-scan:
  #   name: Container Build & Trivy Scan
  #   runs-on: ubuntu-latest
  #   needs: prepare
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build image
  #       run: |
  #         docker build -t local/2bykilt:pr-${{ github.run_number }} .
  #     - name: Trivy (Vuln + Config + License)
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: local/2bykilt:pr-${{ github.run_number }}
  #         format: 'table'
  #         exit-code: '1'
  #         vuln-type: 'os,library'
  #         severity: 'HIGH,CRITICAL'
  #     - name: SBOM (CycloneDX)
  #       run: |
  #         trivy image --format cyclonedx -o sbom.cdx.json local/2bykilt:pr-${{ github.run_number }}
  #     - name: Upload SBOM
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: sbom-cyclonedx
  #          path: sbom.cdx.json

  summarize:
    name: Summarize & Comment
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    # needs: [ test, sca, secret, container-scan ]
    needs: [ test, sca, secret ]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Extract metrics
        id: metrics
        shell: bash
        run: |
          set -euo pipefail

          # Locate coverage.xml from artifacts
          COV_XML=""
          if [ -f artifacts/coverage-xml/coverage.xml ]; then
            COV_XML="artifacts/coverage-xml/coverage.xml"
          elif [ -f coverage.xml ]; then
            COV_XML="coverage.xml"
          fi

          if [ -n "${COV_XML}" ] && command -v python3 >/dev/null 2>&1; then
            COVERAGE=$(python3 - "${COV_XML}" <<'PY'
          import sys, xml.etree.ElementTree as ET
          path = sys.argv[1]
          try:
              root = ET.parse(path).getroot()
              # Prefer Cobertura-style line-rate if present
              rate = root.attrib.get("line-rate")
              if rate is not None:
                  print(rate)
                  sys.exit(0)

              # Compute from lines-covered / lines-valid if available (coverage.py XML)
              lines_covered = root.attrib.get("lines-covered")
              lines_valid = root.attrib.get("lines-valid")
              if lines_covered is not None and lines_valid is not None:
                  valid = float(lines_valid)
                  if valid > 0:
                      print(str(float(lines_covered) / valid))
                      sys.exit(0)

              # Fallback for JaCoCo-style counters
              covered = missed = 0
              for c in root.findall(".//counter[@type='LINE']"):
                  covered += int(c.attrib.get("covered", 0))
                  missed += int(c.attrib.get("missed", 0))
              total = covered + missed
              if total > 0:
                  print(str(covered / total))
                  sys.exit(0)
          except Exception:
              pass
          print("N/A")
          PY
            )
          else
            # Fallback (very best-effort)
            COVERAGE=$(grep -Po 'line-rate="\K[0-9.]+' "${COV_XML:-/dev/null}" 2>/dev/null || echo 'N/A') || true
          fi

          if [ -f artifacts/pip-audit/pip-audit.max ]; then
            MAX_AUDIT=$(cat artifacts/pip-audit/pip-audit.max)
          else
            MAX_AUDIT='N/A'
          fi

          echo "coverage=$COVERAGE" >> "$GITHUB_OUTPUT"
          echo "pip_audit_max=$MAX_AUDIT" >> "$GITHUB_OUTPUT"
          
      - name: Create PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## セキュリティ/品質集約レポート

            - テスト & カバレッジ: ${{ steps.metrics.outputs.coverage }}
            - 依存脆弱性最大重大度: ${{ steps.metrics.outputs.pip_audit_max }}
            - Sonar 状態: (SONAR_TOKEN 未設定ならスキップ / 設定時は Checks 参照)
            - Trivy: HIGH/CRITICAL 0 を条件 (失敗していれば本PRは赤)
            - Secret Scan: 問題なしであれば成功

            詳細は各ジョブログと artifacts を参照してください。
