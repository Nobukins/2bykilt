name: Security CI

on:
  pull_request:
    branches: [ "*" ]
  push:
    branches: ["2bykilt", "security-first" ]
  # schedule:
  #   - cron: '0 2 * * *'

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read
  checks: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  prepare:
    name: Prepare / Install
    runs-on: ubuntu-latest
    outputs:
      coverage-file: ${{ steps.coverage_path.outputs.path }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pip-audit
      - name: Show dependency tree
        run: pip freeze
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            sonar-${{ runner.os }}-
      - name: Record coverage path
        id: coverage_path
        run: echo "path=coverage.xml" >> $GITHUB_OUTPUT

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install (reuse)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Pytest
        run: pytest --maxfail=1 --cov=src --cov-report=xml --cov-report=term
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  sonar:
    name: SonarCloud / SAST
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name != 'schedule' && github.actor != 'dependabot[bot]' }}
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python (for analyzers)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.python.coverage.reportPaths=coverage.xml
      - name: Quality Gate Status
        id: quality_gate
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: sonar-quality-gate:check

  sca:
    name: Dependency Audit (pip-audit)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit
      - name: Run pip-audit
        id: pip_audit
        run: |
          pip-audit -r requirements.txt -f json > pip-audit.json || true
          python - <<'PY'
          import json, sys
          try:
              with open('pip-audit.json') as f:
                  data = json.load(f)
              if isinstance(data, str):
                  # 文字列の場合はエラーにする
                  print("Error: pip-audit.json is not a valid JSON object or array")
                  sys.exit(1)
          except Exception as e:
              print('Failed to parse pip-audit.json', e)
              sys.exit(1)
          # 以降の処理も data の型によって分岐
          if isinstance(data, list):
              max_sev = max((item.get("severity", 0) for item in data if isinstance(item, dict)), default=0)
          else:
              max_sev = data.get("severity", 0) if isinstance(data, dict) else 0

          print(f"MAX_SEVERITY={max_sev}")
          with open('pip-audit.max','w') as f:
              f.write(str(max_sev))
          if max_sev >= 3:
              sys.exit(1)
          PY
      - name: Upload audit artifact
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit
          path: |
            pip-audit.json
            pip-audit.max

  secret:
    name: Secret Scan (gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config: .gitleaks.toml
          fail: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container-scan:
    name: Container Build & Trivy Scan
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t local/2bykilt:pr-${{ github.run_number }} .
      - name: Trivy (Vuln + Config + License)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local/2bykilt:pr-${{ github.run_number }}
          format: 'table'
          exit-code: '1'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
      - name: SBOM (CycloneDX)
        run: |
          trivy image --format cyclonedx -o sbom.cdx.json local/2bykilt:pr-${{ github.run_number }}
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cdx.json

  summarize:
    name: Summarize & Comment
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs: [ test, sca, secret, container-scan ]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Extract metrics
        id: metrics
        run: |
          COVERAGE=$(grep -Po 'line-rate="\K[0-9.]+' coverage.xml 2>/dev/null || echo 'N/A') || true
          if [ -f artifacts/pip-audit/pip-audit.max ]; then MAX_AUDIT=$(cat artifacts/pip-audit/pip-audit.max); else MAX_AUDIT='N/A'; fi
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "pip_audit_max=$MAX_AUDIT" >> $GITHUB_OUTPUT
      - name: Create PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## セキュリティ/品質集約レポート

            - テスト & カバレッジ: ${{ steps.metrics.outputs.coverage }}
            - 依存脆弱性最大重大度: ${{ steps.metrics.outputs.pip_audit_max }}
            - Sonar 状態: (SONAR_TOKEN 未設定ならスキップ / 設定時は Checks 参照)
            - Trivy: HIGH/CRITICAL 0 を条件 (失敗していれば本PRは赤)
            - Secret Scan: 問題なしであれば成功

            詳細は各ジョブログと artifacts を参照してください。
