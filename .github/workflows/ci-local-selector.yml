name: Local Selector Smoke Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'myscript/**'
      - '.github/workflows/ci-local-selector.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'myscript/**'
      - '.github/workflows/ci-local-selector.yml'
  workflow_dispatch:

jobs:
  local-selector-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libatk-bridge2.0-0 \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libasound2

    - name: Install Playwright browsers
      run: |
        python -m pip install playwright
        playwright install --with-deps chromium

    - name: Install Python dependencies
      run: |
        python -m pip install -r requirements.txt
        python -m pip install pytest-cov

    - name: Validate RECORDING_PATH environment
      run: |
        if [ -z "$RECORDING_PATH" ]; then
          echo "‚ùå RECORDING_PATH environment variable is not set"
          echo "üí° Please set RECORDING_PATH to specify where recordings should be saved"
          exit 1
        fi
        echo "‚úÖ RECORDING_PATH is set to: $RECORDING_PATH"

    - name: Create recording directory
      run: |
        mkdir -p "$RECORDING_PATH"
        echo "Created recording directory: $RECORDING_PATH"

    - name: Run local selector smoke test (with retry)
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 2
        command: |
          cd myscript
          python -m pytest -v --tb=short --cov=. --cov-report=xml --cov-report=html --cov-report=term

    - name: Validate recording output and collect artifacts
      run: |
        echo "=== Recording Output Validation ==="
        
        # Check for generated video files
        echo "Checking for generated video files..."
        VIDEO_FILES=$(find "$RECORDING_PATH" -name '*.webm' -size +0 2>/dev/null)
        if [ -z "$VIDEO_FILES" ]; then
          echo "‚ùå No valid video files found in $RECORDING_PATH"
          ls -la "$RECORDING_PATH"
          exit 1
        else
          echo "‚úÖ Video files found and validated:"
          echo "$VIDEO_FILES" | while read -r file; do
            FILE_SIZE=$(stat -c%s "$file")
            echo "  üìπ $file (${FILE_SIZE} bytes)"
          done
        fi

        # Check for generated screenshots
        echo "Checking for generated screenshots..."
        SCREENSHOT_FILES=$(find "$RECORDING_PATH" -name '*.png' -size +0 2>/dev/null)
        if [ -n "$SCREENSHOT_FILES" ]; then
          echo "‚úÖ Screenshots found and validated:"
          echo "$SCREENSHOT_FILES" | while read -r file; do
            FILE_SIZE=$(stat -c%s "$file")
            echo "  üì∏ $file (${FILE_SIZE} bytes)"
          done
        else
          echo "‚ÑπÔ∏è No screenshots found (this is OK for basic smoke test)"
        fi

        # Check for manifest files
        echo "Checking for manifest files..."
        MANIFEST_FILES=$(find "$RECORDING_PATH" -name '*manifest*.json' 2>/dev/null)
        if [ -n "$MANIFEST_FILES" ]; then
          echo "‚úÖ Manifest files found:"
          echo "$MANIFEST_FILES" | while read -r file; do
            FILE_SIZE=$(stat -c%s "$file")
            echo "  üìã $file (${FILE_SIZE} bytes)"
          done
        else
          echo "‚ö†Ô∏è No manifest files found"
        fi

    - name: Collect artifacts to artifacts/ directory
      run: |
        echo "=== Artifact Collection ==="
        
        # Create artifacts directory if it doesn't exist
        mkdir -p artifacts
        
        # Copy video files
        VIDEO_COUNT=$(find "$RECORDING_PATH" -name '*.webm' -size +0 | wc -l)
        if [ "$VIDEO_COUNT" -gt 0 ]; then
          echo "Copying $VIDEO_COUNT video files to artifacts/"
          find "$RECORDING_PATH" -name '*.webm' -size +0 -exec cp {} artifacts/ \;
        fi
        
        # Copy screenshot files
        SCREENSHOT_COUNT=$(find "$RECORDING_PATH" -name '*.png' -size +0 | wc -l)
        if [ "$SCREENSHOT_COUNT" -gt 0 ]; then
          echo "Copying $SCREENSHOT_COUNT screenshot files to artifacts/"
          find "$RECORDING_PATH" -name '*.png' -size +0 -exec cp {} artifacts/ \;
        fi
        
        # Copy manifest files
        MANIFEST_COUNT=$(find "$RECORDING_PATH" -name '*manifest*.json' | wc -l)
        if [ "$MANIFEST_COUNT" -gt 0 ]; then
          echo "Copying $MANIFEST_COUNT manifest files to artifacts/"
          find "$RECORDING_PATH" -name '*manifest*.json' -exec cp {} artifacts/ \;
        fi
        
        # Copy coverage reports
        if [ -f "myscript/coverage.xml" ]; then
          echo "Copying coverage report to artifacts/"
          cp myscript/coverage.xml artifacts/
        fi
        if [ -d "myscript/htmlcov" ]; then
          echo "Copying HTML coverage report to artifacts/"
          cp -r myscript/htmlcov artifacts/
        fi
        
        echo "Artifact collection completed"
        ls -la artifacts/

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: local-selector-test-artifacts
        path: |
          artifacts/
          !artifacts/**/*.tmp
        retention-days: 7

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          myscript/coverage.xml
          myscript/htmlcov/
        retention-days: 30