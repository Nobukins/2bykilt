name: Dependency Pipeline (Issue #178)

# Validates and auto-generates derived artifacts when ISSUE_DEPENDENCIES.yml changes
# Handles PR validation, scheduled generation, and manual triggers

on:
  # PR validation for default branch
  pull_request:
    branches:
      - 2bykilt
    paths:
      - 'docs/roadmap/ISSUE_DEPENDENCIES.yml'
  
  # Scheduled generation at 3 AM UTC
  schedule:
    - cron: '0 3 * * *'
  
  # Manual trigger
  workflow_dispatch:
  
  # Push trigger for immediate generation
  push:
    branches:
      - 2bykilt
    paths:
      - 'docs/roadmap/ISSUE_DEPENDENCIES.yml'

permissions:
  contents: write
  pull-requests: read

jobs:
  validate-deps:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests

      - name: Dependency Validation
        run: |
          echo "🔍 Validating ISSUE_DEPENDENCIES.yml..."
          python scripts/validate_dependencies.py docs/roadmap/ISSUE_DEPENDENCIES.yml

  regenerate-and-commit:
    name: Regenerate and Commit
    needs: validate-deps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests

      - name: Get current commit hashes
        id: commits
        run: |
          echo "roadmap_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "dependencies_commit=$(git log -1 --format="%H" -- docs/roadmap/ISSUE_DEPENDENCIES.yml)" >> $GITHUB_OUTPUT

      - name: Regenerate derived artifacts
        run: |
          echo "🔄 Regenerating derived artifacts..."
          python scripts/gen_mermaid.py docs/roadmap/ISSUE_DEPENDENCIES.yml > docs/roadmap/DEPENDENCY_GRAPH.md
          python scripts/generate_task_dashboard.py
          python scripts/generate_task_queue.py \
            --repo ${{ github.repository }} \
            --input docs/roadmap/ISSUE_DEPENDENCIES.yml \
            --output docs/roadmap/TASK_QUEUE.yml \
            --no-api \
            --verbose

      - name: Update commit hashes in generated file
        run: |
          sed -i 's/roadmap_commit: REPLACE_ME/roadmap_commit: ${{ steps.commits.outputs.roadmap_commit }}/' docs/roadmap/TASK_QUEUE.yml
          sed -i 's/dependencies_commit: REPLACE_ME/dependencies_commit: ${{ steps.commits.outputs.dependencies_commit }}/' docs/roadmap/TASK_QUEUE.yml

      - name: Validate generated task queue
        run: |
          echo "✅ Validating generated task queue..."
          python scripts/validate_task_queue.py \
            --queue docs/roadmap/TASK_QUEUE.yml \
            --dependencies docs/roadmap/ISSUE_DEPENDENCIES.yml

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet docs/roadmap/TASK_QUEUE.yml docs/roadmap/DEPENDENCY_GRAPH.md docs/roadmap/TASK_DASHBOARD.md; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in generated files"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in generated files"
            git diff --stat docs/roadmap/TASK_QUEUE.yml docs/roadmap/DEPENDENCY_GRAPH.md docs/roadmap/TASK_DASHBOARD.md
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Dependency Pipeline Bot)"
          git add docs/roadmap/TASK_QUEUE.yml docs/roadmap/DEPENDENCY_GRAPH.md docs/roadmap/TASK_DASHBOARD.md
          COMMIT_TS=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          git commit -m "docs: auto-update dependency artifacts" \
                     -m "Generated at: $COMMIT_TS" \
                     -m "Roadmap commit: ${{ steps.commits.outputs.roadmap_commit }}" \
                     -m "Dependencies commit: ${{ steps.commits.outputs.dependencies_commit }}" \
                     -m "[skip ci]" || echo "Nothing to commit (race)"
          git push origin 2bykilt

      - name: Skip push (PR context)
        if: steps.changes.outputs.changed == 'true' && github.event_name == 'pull_request'
        run: |
          echo "Skip committing updates on pull_request (detached HEAD)" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Output summary
        run: |
          echo "## Dependency Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "- **PR**: ${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Validation**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes detected**: ${{ steps.changes.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- DEPENDENCY_GRAPH.md" >> $GITHUB_STEP_SUMMARY
          echo "- TASK_QUEUE.yml" >> $GITHUB_STEP_SUMMARY
          echo "- TASK_DASHBOARD.md" >> $GITHUB_STEP_SUMMARY
          
          # Add generation statistics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generation Statistics" >> $GITHUB_STEP_SUMMARY
          python -c "
          import yaml
          with open('docs/roadmap/TASK_QUEUE.yml', 'r') as f:
              data = yaml.safe_load(f)
          print(f'- **Total issues**: {data.get(\"diagnostics\", {}).get(\"total_issues\", \"unknown\")}')
          print(f'- **Ready**: {len(data.get(\"ready\", []))} issues')
          print(f'- **Blocked**: {len(data.get(\"blocked\", []))} issues') 
          print(f'- **In Progress**: {len(data.get(\"in_progress\", []))} issues')
          print(f'- **Done**: {len(data.get(\"done\", []))} issues')
          " >> $GITHUB_STEP_SUMMARY