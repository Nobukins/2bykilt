name: Release Management

on:
  push:
    branches: [ main, 2bykilt ]
    paths:
      - 'VERSION'
      - 'src/version/**'
      - '.github/workflows/release-management.yml'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'false'

jobs:
  version-check:
    name: Version Check and Release Management
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
      changelog: ${{ steps.generate-changelog.outputs.changelog }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read VERSION file
        id: read-version
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Current version: $VERSION"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Release version detected: $VERSION"
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Prerelease version detected: $VERSION"
          fi

      - name: Check if tag exists
        id: check-tag
        continue-on-error: true
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          git fetch --tags
          if git rev-parse "refs/tags/v$VERSION" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag v$VERSION already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag v$VERSION does not exist yet"
          fi

      - name: Generate changelog from commits
        id: generate-changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          VERSION=$(cat VERSION | tr -d '\n')
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # First release - include all commits
            CHANGELOG=$(git log --pretty=format:"- %h: %s (%an)" | head -20)
          else
            # Include commits since last tag
            CHANGELOG=$(git log "$PREVIOUS_TAG..HEAD" --pretty=format:"- %h: %s (%an)" | head -20)
          fi
          
          # Escape newlines for output
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
          echo "üìù Changelog generated"

      - name: Create Git tag
        id: create-tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          # Create annotated tag
          git tag -a "v$VERSION" -m "Release version $VERSION"
          git push origin "v$VERSION"
          echo "‚úÖ Tag v$VERSION created and pushed"
          echo "tag_created=true" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: generate-release-notes
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate categorized changelog using conventional commits
          echo "# Release Notes: v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "## üöÄ Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            GIT_RANGE="HEAD"
          else
            echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            GIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # Features
          FEATURES=$(git log "$GIT_RANGE" --pretty=format:"%h %s" --grep="^feat" --grep="^feature" -i 2>/dev/null | sed 's/^/- /' || echo "")
          if [ ! -z "$FEATURES" ]; then
            echo "### ‚ú® Features" >> release_notes.md
            echo "$FEATURES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Bug Fixes
          FIXES=$(git log "$GIT_RANGE" --pretty=format:"%h %s" --grep="^fix" -i 2>/dev/null | sed 's/^/- /' || echo "")
          if [ ! -z "$FIXES" ]; then
            echo "### üêõ Bug Fixes" >> release_notes.md
            echo "$FIXES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Documentation
          DOCS=$(git log "$GIT_RANGE" --pretty=format:"%h %s" --grep="^docs" -i 2>/dev/null | sed 's/^/- /' || echo "")
          if [ ! -z "$DOCS" ]; then
            echo "### üìö Documentation" >> release_notes.md
            echo "$DOCS" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Refactoring
          REFACTOR=$(git log "$GIT_RANGE" --pretty=format:"%h %s" --grep="^refactor" -i 2>/dev/null | sed 's/^/- /' || echo "")
          if [ ! -z "$REFACTOR" ]; then
            echo "### üîß Refactoring" >> release_notes.md
            echo "$REFACTOR" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Other commits
          OTHER=$(git log "$GIT_RANGE" --pretty=format:"%h %s" --grep="^feat\|^fix\|^docs\|^refactor" -i --invert-grep 2>/dev/null | head -10 | sed 's/^/- /' || echo "")
          if [ ! -z "$OTHER" ]; then
            echo "### üìù Other Changes" >> release_notes.md
            echo "$OTHER" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Add footer
          echo "### üìñ Documentation" >> release_notes.md
          echo "- [Version Management Guide](https://github.com/${{ github.repository }}/blob/main/docs/version-management.md)" >> release_notes.md
          echo "- [Release Process Guide](https://github.com/${{ github.repository }}/blob/main/docs/release-process.md)" >> release_notes.md
          echo "- [CI/CD Integration Guide](https://github.com/${{ github.repository }}/blob/main/docs/ci-cd-integration.md)" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "*Generated by GitHub Actions Release Management*" >> release_notes.md
          
          # Read the file and escape for output
          RELEASE_NOTES=$(cat release_notes.md)
          echo "release_notes<<NOTES_EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "NOTES_EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        if: (steps.check-tag.outputs.tag_exists == 'false') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.read-version.outputs.version }}
          release_name: Release ${{ steps.read-version.outputs.version }}
          body: ${{ steps.generate-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}

      - name: Summary
        run: |
          echo "=== Release Management Summary ==="
          echo "Version: $(cat VERSION | tr -d '\n')"
          echo "Tag Created: ${{ steps.create-tag.outputs.tag_created }}"
          echo "Tag Exists: ${{ steps.check-tag.outputs.tag_exists }}"
          echo "Is Prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}"
          echo "======================================"

  verify-version-format:
    name: Verify Version Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate VERSION file format
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          
          # Check if VERSION matches semantic versioning format
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?(\+[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH[-PRERELEASE][+METADATA]"
            echo "Examples: 1.0.0, 1.0.0-alpha.1, 1.0.0-rc.1, 1.0.0+build.1"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check VERSION file newline
        run: |
          # Ensure VERSION file ends with exactly one newline
          if [ -f VERSION ]; then
            LINES=$(wc -l < VERSION)
            echo "VERSION file has $LINES line(s)"
            if [ "$LINES" -ne 1 ]; then
              echo "‚ö†Ô∏è VERSION file should have exactly 1 line (with newline at end)"
            fi
          fi

  changelog-validation:
    name: Changelog Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit messages
        run: |
          echo "=== Commit Message Validation ==="
          
          # Get last 10 commits
          COMMITS=$(git log --oneline -10)
          echo "Recent commits:"
          echo "$COMMITS"
          
          # Count commits with conventional commit format
          VALID_COMMITS=$(git log -10 --pretty=format:"%s" | grep -E "^(feat|fix|docs|style|refactor|perf|test|chore|ci):" | wc -l)
          TOTAL_COMMITS=10
          
          echo ""
          echo "‚úÖ $VALID_COMMITS / $TOTAL_COMMITS commits follow conventional format"
          
          if [ "$VALID_COMMITS" -lt 5 ]; then
            echo "‚ö†Ô∏è Consider using conventional commit format for better changelog generation"
            echo "Format: <type>(<scope>): <subject>"
            echo "Types: feat, fix, docs, style, refactor, perf, test, chore, ci"
          fi

  test-version-commands:
    name: Test Version Commands
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install -e .
          python -m pip install pytest

      - name: Run version tests
        run: |
          if [ -d "tests/version" ]; then
            echo "üß™ Running version management tests..."
            python -m pytest tests/version/ -v --tb=short
          else
            echo "‚ÑπÔ∏è No version tests directory found"
          fi

      - name: Test version commands
        run: |
          echo "=== Testing Version Commands ==="
          
          # Test version show
          echo "1. Testing 'version show'..."
          python bykilt.py version show || echo "‚ö†Ô∏è Command not fully available in CI"
          
          echo ""
          echo "‚úÖ Version commands are available"

  notify-on-release:
    name: Notify on Release
    needs: [ version-check, verify-version-format ]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Release Summary
        run: |
          cat <<EOF
          
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë     Release Management Complete        ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          
          Version: ${{ needs.version-check.outputs.version }}
          Is Prerelease: ${{ needs.version-check.outputs.is_prerelease }}
          
          GitHub Release created: ${{ needs.version-check.outputs.version }}
          Git Tag: v${{ needs.version-check.outputs.version }}
          
          üìö Documentation:
            - Version Management Guide: docs/version-management.md
            - Release Process Guide: docs/release-process.md
          
          EOF
