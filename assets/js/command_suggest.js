// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„ÅÆÊòéÁ§∫ÁöÑ„Å™Ë®≠ÂÆö
window.CommandSystem = {
    initialized: false,
    commands: [],
    activeTextarea: null,
    suggestionsContainer: null,
    currentTrigger: null,
    selectedIndex: -1,
    filterText: '',
    isShowingSuggestions: false
};

// Âç≥ÊôÇÂÆüË°åÈñ¢Êï∞
(function() {
    async function fetchCommands() {
        console.log("üîÑ Fetching command data...");
        try {
            const response = await fetch('/api/commands');
            if (response.ok) {
                const data = await response.json();
                console.log(`‚úÖ Retrieved ${data.length} commands`);
                window.CommandSystem.commands = data;
                return data;
            } else {
                console.error("‚ùå Failed to fetch commands:", response.status);
                return [];
            }
        } catch (error) {
            console.error("‚ùå Error fetching commands:", error);
            return [];
        }
    }

    function setupTextareaMonitoring() {
        console.log("üîç Monitoring textareas...");
        const textareas = document.querySelectorAll('textarea');
        textareas.forEach((textarea) => {
            if (textarea.getAttribute('data-command-monitor') === 'true') return;
            textarea.setAttribute('data-command-monitor', 'true');
            textarea.addEventListener('input', handleTextareaInput);
            textarea.addEventListener('keydown', handleTextareaKeydown);
            textarea.style.border = "2px dashed red"; // Visual feedback
        });
    }

    function handleTextareaInput(e) {
        const textarea = e.target;
        const text = textarea.value;
        const cursorPos = textarea.selectionStart;
        const lastChar = cursorPos > 0 ? text.charAt(cursorPos - 1) : "";

        console.log(`üìù Input detected:`, {
            cursorPos,
            lastChar,
            trigger: lastChar === "@" || lastChar === "/" ? "‚úÖ" : "‚ùå"
        });

        // „Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅÆÊ§úÂá∫
        if (lastChar === "@" || lastChar === "/") {
            console.log(`üéØ Trigger character detected: ${lastChar}`);
            window.CommandSystem.currentTrigger = lastChar;
            window.CommandSystem.activeTextarea = textarea;
            window.CommandSystem.filterText = '';
            window.CommandSystem.selectedIndex = -1;
            showSuggestions(textarea, cursorPos);
        } 
        // ÊèêÊ°àË°®Á§∫‰∏≠„ÅÆÂÖ•ÂäõÂá¶ÁêÜ
        else if (window.CommandSystem.isShowingSuggestions) {
            // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Åå„Éà„É™„Ç¨„ÉºÊñáÂ≠ó„Çà„ÇäÂâç„Å´ÁßªÂãï„Åó„ÅüÂ†¥Âêà„ÄÅÊèêÊ°à„ÇíÈñâ„Åò„Çã
            const triggerPos = findLastTriggerPosition(text, cursorPos);
            if (triggerPos === -1) {
                hideSuggestions();
                return;
            }

            // „Éï„Ç£„É´„Çø„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíÊõ¥Êñ∞
            window.CommandSystem.filterText = text.substring(triggerPos + 1, cursorPos);
            updateSuggestions();
        }
    }

    function handleTextareaKeydown(e) {
        if (!window.CommandSystem.isShowingSuggestions) return;

        switch (e.key) {
            case 'ArrowUp':
                e.preventDefault();
                navigateSuggestion(-1);
                break;
            case 'ArrowDown':
                e.preventDefault();
                navigateSuggestion(1);
                break;
            case 'Enter':
                if (window.CommandSystem.selectedIndex >= 0) {
                    e.preventDefault();
                    selectCurrentSuggestion();
                }
                break;
            case 'Escape':
                e.preventDefault();
                hideSuggestions();
                break;
            case 'Tab':
                if (window.CommandSystem.isShowingSuggestions) {
                    e.preventDefault();
                    selectCurrentSuggestion();
                }
                break;
        }
    }

    function findLastTriggerPosition(text, cursorPos) {
        // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Çà„ÇäÂâç„ÅÆÊúÄÂæå„ÅÆ„Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
        const textBeforeCursor = text.substring(0, cursorPos);
        const lastAtPos = textBeforeCursor.lastIndexOf('@');
        const lastSlashPos = textBeforeCursor.lastIndexOf('/');
        
        // ÊúÄÂæå„Å´Ë¶ã„Å§„Åã„Å£„Åü„Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅÆ‰ΩçÁΩÆ„ÇíËøî„Åô
        const lastTriggerPos = Math.max(lastAtPos, lastSlashPos);
        
        // „Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„ÄÅ„Åæ„Åü„ÅØÁ©∫ÁôΩ„ÅßÂå∫Âàá„Çâ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ-1„ÇíËøî„Åô
        if (lastTriggerPos === -1) return -1;
        
        // „Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅÆÂâç„Å´Á©∫ÁôΩ„Åå„ÅÇ„Çã„Åã„ÄÅÊñáÂ≠óÂàó„ÅÆÂÖàÈ†≠„ÅÆÂ†¥Âêà„ÅÆ„ÅøÊúâÂäπ
        const charBeforeTrigger = lastTriggerPos > 0 ? textBeforeCursor.charAt(lastTriggerPos - 1) : ' ';
        if (charBeforeTrigger === ' ' || charBeforeTrigger === '\n' || lastTriggerPos === 0) {
            return lastTriggerPos;
        }
        
        return -1;
    }

    function showSuggestions(textarea, cursorPos) {
        // Êó¢Â≠ò„ÅÆÊèêÊ°à„Ç≥„É≥„ÉÜ„Éä„ÇíÂâäÈô§
        if (window.CommandSystem.suggestionsContainer) {
            window.CommandSystem.suggestionsContainer.remove();
        }

        // Êñ∞„Åó„ÅÑÊèêÊ°à„Ç≥„É≥„ÉÜ„Éä„Çí‰ΩúÊàê
        const suggestionsContainer = document.createElement('div');
        suggestionsContainer.className = 'command-suggestions';
        suggestionsContainer.style.position = 'absolute';
        suggestionsContainer.style.zIndex = '10000';
        suggestionsContainer.style.backgroundColor = 'white';
        suggestionsContainer.style.border = '1px solid #ccc';
        suggestionsContainer.style.borderRadius = '4px';
        suggestionsContainer.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
        suggestionsContainer.style.maxHeight = '200px';
        suggestionsContainer.style.overflowY = 'auto';
        suggestionsContainer.style.width = '300px';

        // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅÆ‰ΩçÁΩÆ„Å´Âü∫„Å•„ÅÑ„Å¶ÈÖçÁΩÆ
        const rect = textarea.getBoundingClientRect();
        const lineHeight = parseInt(getComputedStyle(textarea).lineHeight) || 20;
        
        // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆÂ∫ßÊ®ô„ÇíË®àÁÆóÔºàÁ∞°ÊòìÁöÑ„Å™ÂÆüË£ÖÔºâ
        const textBeforeCursor = textarea.value.substring(0, cursorPos);
        const lines = textBeforeCursor.split('\n');
        const currentLine = lines.length;
        
        suggestionsContainer.style.top = `${rect.top + window.scrollY + (currentLine * lineHeight)}px`;
        suggestionsContainer.style.left = `${rect.left + window.scrollX}px`;

        // ÊèêÊ°à„É™„Çπ„Éà„ÇíË°®Á§∫
        updateSuggestionsContent(suggestionsContainer);
        
        // DOM„Å´ËøΩÂä†
        document.body.appendChild(suggestionsContainer);
        window.CommandSystem.suggestionsContainer = suggestionsContainer;
        window.CommandSystem.isShowingSuggestions = true;
    }

    function updateSuggestions() {
        if (!window.CommandSystem.suggestionsContainer) return;
        updateSuggestionsContent(window.CommandSystem.suggestionsContainer);
    }

    function updateSuggestionsContent(container) {
        // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„Ç≥„Éû„É≥„Éâ„É™„Çπ„Éà„ÇíÂèñÂæó
        const filteredCommands = filterCommands(window.CommandSystem.filterText);
        
        // „Ç≥„É≥„ÉÜ„Éä„Çí„ÇØ„É™„Ç¢
        container.innerHTML = '';
        
        if (filteredCommands.length === 0) {
            const noResults = document.createElement('div');
            noResults.textContent = 'No commands found';
            noResults.style.padding = '8px 12px';
            noResults.style.color = '#999';
            container.appendChild(noResults);
            return;
        }
        
        // ÊèêÊ°à„É™„Çπ„Éà„Çí‰ΩúÊàê
        filteredCommands.forEach((command, index) => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            item.style.padding = '8px 12px';
            item.style.cursor = 'pointer';
            
            if (index === window.CommandSystem.selectedIndex) {
                item.classList.add('active');
                item.style.backgroundColor = '#e0e0e0';
            }
            
            // „Ç≥„Éû„É≥„ÉâÂêç„Å®Ë™¨Êòé„ÇíË°®Á§∫
            const nameSpan = document.createElement('span');
            nameSpan.textContent = command.name;
            nameSpan.style.fontWeight = 'bold';
            
            const descSpan = document.createElement('span');
            descSpan.textContent = command.description ? ` - ${command.description}` : '';
            descSpan.style.color = '#666';
            
            item.appendChild(nameSpan);
            item.appendChild(descSpan);
            
            // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†
            item.addEventListener('click', () => {
                window.CommandSystem.selectedIndex = index;
                selectCurrentSuggestion();
            });
            
            // „Éû„Ç¶„Çπ„Ç™„Éº„Éê„Éº„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†
            item.addEventListener('mouseover', () => {
                window.CommandSystem.selectedIndex = index;
                updateSuggestions();
            });
            
            container.appendChild(item);
        });
    }

    function filterCommands(filterText) {
        if (!window.CommandSystem.commands || window.CommandSystem.commands.length === 0) {
            return [];
        }
        
        if (!filterText) {
            return window.CommandSystem.commands;
        }
        
        // „Éï„Ç£„É´„Çø„Éº„ÉÜ„Ç≠„Çπ„Éà„Å´Âü∫„Å•„ÅÑ„Å¶„Ç≥„Éû„É≥„Éâ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        return window.CommandSystem.commands.filter(cmd => 
            cmd.name.toLowerCase().includes(filterText.toLowerCase())
        );
    }

    function navigateSuggestion(direction) {
        const filteredCommands = filterCommands(window.CommandSystem.filterText);
        if (filteredCommands.length === 0) return;
        
        // ÈÅ∏Êäû„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÊõ¥Êñ∞
        let newIndex = window.CommandSystem.selectedIndex + direction;
        if (newIndex < 0) {
            newIndex = filteredCommands.length - 1;
        } else if (newIndex >= filteredCommands.length) {
            newIndex = 0;
        }
        
        window.CommandSystem.selectedIndex = newIndex;
        updateSuggestions();
        
        // ÈÅ∏ÊäûÈ†ÖÁõÆ„ÅåË¶ã„Åà„Çã„Çà„ÅÜ„Å´„Çπ„ÇØ„É≠„Éº„É´
        const container = window.CommandSystem.suggestionsContainer;
        const selectedItem = container.children[newIndex];
        if (selectedItem) {
            if (selectedItem.offsetTop < container.scrollTop) {
                container.scrollTop = selectedItem.offsetTop;
            } else if (selectedItem.offsetTop + selectedItem.offsetHeight > container.scrollTop + container.offsetHeight) {
                container.scrollTop = selectedItem.offsetTop + selectedItem.offsetHeight - container.offsetHeight;
            }
        }
    }

    function selectCurrentSuggestion() {
        const filteredCommands = filterCommands(window.CommandSystem.filterText);
        if (filteredCommands.length === 0 || window.CommandSystem.selectedIndex < 0) {
            hideSuggestions();
            return;
        }
        
        const selectedCommand = filteredCommands[window.CommandSystem.selectedIndex];
        const textarea = window.CommandSystem.activeTextarea;
        if (!textarea || !selectedCommand) return;
        
        // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅÆÁèæÂú®„ÅÆÂÄ§„ÇíÂèñÂæó
        const text = textarea.value;
        const cursorPos = textarea.selectionStart;
        
        // „Éà„É™„Ç¨„ÉºÊñáÂ≠ó„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
        const triggerPos = findLastTriggerPosition(text, cursorPos);
        if (triggerPos === -1) {
            hideSuggestions();
            return;
        }
        
        // „Ç≥„Éû„É≥„Éâ„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁîüÊàê
        let commandTemplate = selectedCommand.name;
        
        // ÂøÖÈ†à„Éë„É©„É°„Éº„Çø„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
        if (selectedCommand.params) {
            const requiredParams = selectedCommand.params.filter(p => p.required);
            if (requiredParams.length > 0) {
                commandTemplate += ' ' + requiredParams.map(p => `${p.name}=`).join(' ');
            }
        }
        
        // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅÆÂÄ§„ÇíÊõ¥Êñ∞
        const newText = text.substring(0, triggerPos) + 
                        window.CommandSystem.currentTrigger + 
                        commandTemplate + 
                        text.substring(cursorPos);
        
        textarea.value = newText;
        
        // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞
        const newCursorPos = triggerPos + window.CommandSystem.currentTrigger.length + commandTemplate.length;
        textarea.setSelectionRange(newCursorPos, newCursorPos);
        
        // ÊèêÊ°à„ÇíÈñâ„Åò„Çã
        hideSuggestions();
        
        // input „Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´„Åï„Åõ„Å¶Â§âÊõ¥„ÇíÈÄöÁü•
        textarea.dispatchEvent(new Event('input', { bubbles: true }));
    }

    function hideSuggestions() {
        if (window.CommandSystem.suggestionsContainer) {
            window.CommandSystem.suggestionsContainer.remove();
            window.CommandSystem.suggestionsContainer = null;
        }
        window.CommandSystem.isShowingSuggestions = false;
        window.CommandSystem.selectedIndex = -1;
        window.CommandSystem.filterText = '';
    }

    async function initCommandSystem() {
        if (window.CommandSystem.initialized) {
            console.log("‚ö†Ô∏è Command system already initialized");
            return;
        }

        console.log("üöÄ Initializing command system...");
        await fetchCommands();
        setupTextareaMonitoring();
        window.CommandSystem.initialized = true;
        console.log("‚úÖ Command system initialized");
        
        // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíËøΩÂä†ÔºàÊèêÊ°à„É™„Çπ„ÉàÂ§ñ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„ÇâÈñâ„Åò„ÇãÔºâ
        document.addEventListener('click', (e) => {
            if (window.CommandSystem.isShowingSuggestions) {
                const container = window.CommandSystem.suggestionsContainer;
                if (container && !container.contains(e.target) && 
                    e.target !== window.CommandSystem.activeTextarea) {
                    hideSuggestions();
                }
            }
        });
    }

    if (document.readyState === 'complete') {
        setTimeout(initCommandSystem, 1000);
    } else {
        window.addEventListener('load', () => setTimeout(initCommandSystem, 1000));
    }
})();

// CSS„Çπ„Çø„Ç§„É´„ÇíËøΩÂä†Ôºà‰∏ÄÂ∫¶„Å†„ÅëÔºâ
const style = document.createElement('style');
style.textContent = `
.command-suggestions {
    font-family: Arial, sans-serif;
    font-size: 14px;
    color: #333;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    max-height: 200px;
    overflow-y: auto;
    width: 300px;
}
.suggestion-item {
    padding: 8px 12px;
    cursor: pointer;
    transition: background-color 0.3s;
}
.suggestion-item:hover {
    background-color: #f0f0f0;
}
.suggestion-item.active {
    background-color: #e0e0e0;
}
`;
document.head.appendChild(style);
